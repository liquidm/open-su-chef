druid.service=<%= node[:druid][:coordinator][:service] %>
druid.plaintextPort=<%= node[:druid][:coordinator][:port] %>

druid.coordinator.startDelay=PT60S
druid.coordinator.period=PT15S

# Run the overlord service in the coordinator process
druid.coordinator.asOverlord.enabled=true
druid.coordinator.asOverlord.overlordService=<%= node[:druid][:coordinator][:overlord_service] %>

druid.indexer.queue.startDelay=PT5S

druid.indexer.runner.type=remote
druid.indexer.storage.type=metadata
druid.indexer.runner.workerBlackListCleanupPeriod=PT3M
druid.indexer.runner.workerBlackListBackoffTime=PT5M

druid.coordinator.kill.on=true
druid.coordinator.kill.period=PT1H
druid.coordinator.kill.durationToRetain=P3D
druid.coordinator.kill.maxSegments=1000
druid.coordinator.kill.pendingSegments.on=true
druid.coordinator.loadqueuepeon.type=http
druid.coordinator.loadqueuepeon.http.batchSize=3
druid.coordinator.period.indexingPeriod=PT300S

druid.coordinator.balancer.strategy=cachingCost
druid.indexer.runner.minWorkerVersion=1

druid.monitoring.monitors=<%= %w{
  org.apache.druid.java.util.metrics.SysMonitor
  org.apache.druid.java.util.metrics.JvmMonitor
  org.apache.druid.java.util.metrics.JvmCpuMonitor
  org.apache.druid.java.util.metrics.CpuAcctDeltaMonitor
  org.apache.druid.java.util.metrics.JvmThreadsMonitor
} %>
